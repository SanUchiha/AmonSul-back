// <auto-generated />
using System;
using AS.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AS.Infrastructure.Migrations
{
    [DbContext(typeof(DbamonsulContext))]
    partial class DbamonsulContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AS.Domain.Models.ClasificacionGeneral", b =>
                {
                    b.Property<int>("IdClasificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Clasificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClasificacion"));

                    b.Property<int?>("IdPuntuacionElo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Puntuacion_Elo");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<int?>("PuntuacionTotal")
                        .HasColumnType("int")
                        .HasColumnName("Puntuacion_Total");

                    b.HasKey("IdClasificacion")
                        .HasName("PK__Clasific__0D78096BD848289A");

                    b.HasIndex("IdPuntuacionElo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Clasificacion_General", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.ClasificacionTorneo", b =>
                {
                    b.Property<int>("IdClasificacionTorneo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Clasificacion_Torneo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClasificacionTorneo"));

                    b.Property<int?>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<int?>("PosicionFinal")
                        .HasColumnType("int")
                        .HasColumnName("Posicion_Final");

                    b.Property<int?>("PuntosContra")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_contra");

                    b.Property<int?>("PuntosFavor")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Favor");

                    b.Property<int?>("PuntosGeneral")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_General");

                    b.Property<int?>("PuntosTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Torneo");

                    b.HasKey("IdClasificacionTorneo")
                        .HasName("PK__Clasific__CDB980300F5DB99A");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Clasificacion_Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Comentario", b =>
                {
                    b.Property<int>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Comentario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComentario"));

                    b.Property<string>("Comentario1")
                        .HasColumnType("text")
                        .HasColumnName("Comentario");

                    b.Property<DateOnly?>("FechaComentario")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Comentario");

                    b.Property<int?>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<int?>("PuntuarTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Puntuar_Torneo");

                    b.HasKey("IdComentario")
                        .HasName("PK__Comentar__E9AA9973A0E38D7D");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Comentario", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Elo", b =>
                {
                    b.Property<int>("IdElo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Elo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdElo"));

                    b.Property<DateTime>("FechaElo")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fecha_Elo");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<int?>("PuntuacionElo")
                        .HasColumnType("int")
                        .HasColumnName("Puntuacion_Elo");

                    b.HasKey("IdElo")
                        .HasName("PK__Elo__2D4D22C31CCC8245");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Elo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Equipo", b =>
                {
                    b.Property<int>("IdEquipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Equipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEquipo"));

                    b.Property<int>("IdCapitan")
                        .HasColumnType("int")
                        .HasColumnName("Id_Capitan");

                    b.Property<string>("NombreEquipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre_Equipo");

                    b.HasKey("IdEquipo")
                        .HasName("PK__Equipo__4B9119C08347A15E");

                    b.HasIndex("IdCapitan");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("AS.Domain.Models.EquipoUsuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Equipo");

                    b.HasKey("IdUsuario", "IdEquipo");

                    b.HasIndex("IdEquipo");

                    b.ToTable("Equipo_Usuario", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Faccion", b =>
                {
                    b.Property<int>("IdFaccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Faccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFaccion"));

                    b.Property<string>("NombreFaccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nombre_Faccion");

                    b.HasKey("IdFaccion")
                        .HasName("PK__Faccion__8743EEA90139EE02");

                    b.ToTable("Faccion", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Ganador", b =>
                {
                    b.Property<int>("IdGanador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Ganador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGanador"));

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Torneo");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<int>("Resultado")
                        .HasColumnType("int")
                        .HasColumnName("Resultado");

                    b.HasKey("IdGanador")
                        .HasName("PK__Ganador__160354F0762D9D53");

                    b.ToTable("Ganador", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.InscripcionTorneo", b =>
                {
                    b.Property<int>("IdInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Inscripcion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInscripcion"));

                    b.Property<string>("EsPago")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Es_Pago");

                    b.Property<string>("EstadoInscripcion")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Estado_Inscripcion");

                    b.Property<string>("EstadoLista")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Estado_Lista");

                    b.Property<DateOnly?>("FechaEntregaLista")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Entrega_Lista");

                    b.Property<DateOnly?>("FechaInscripcion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Inscripcion");

                    b.Property<int?>("IdEquipo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Equipo");

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<int>("PuntosExtra")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Extra");

                    b.HasKey("IdInscripcion")
                        .HasName("PK__Inscripc__B84666E0A08239E2");

                    b.HasIndex("IdEquipo");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Inscripcion_Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Liga", b =>
                {
                    b.Property<int>("IdLiga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Liga");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLiga"));

                    b.Property<string>("NombreLiga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre_Liga");

                    b.HasKey("IdLiga")
                        .HasName("PK__Liga__0CCA9DE1B35035A6");

                    b.ToTable("Liga");
                });

            modelBuilder.Entity("AS.Domain.Models.LigaTorneo", b =>
                {
                    b.Property<int>("IdLiga")
                        .HasColumnType("int")
                        .HasColumnName("Id_Liga");

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Torneo");

                    b.HasKey("IdLiga", "IdTorneo");

                    b.HasIndex("IdTorneo");

                    b.ToTable("LigaTorneo");
                });

            modelBuilder.Entity("AS.Domain.Models.Lista", b =>
                {
                    b.Property<int>("IdLista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Lista");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLista"));

                    b.Property<string>("Bando")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("Bando");

                    b.Property<string>("Ejercito")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ejercito");

                    b.Property<string>("EstadoLista")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("NO ENTREGADA")
                        .HasColumnName("Estado_Lista");

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Entrega");

                    b.Property<int>("IdInscripcion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Inscripcion");

                    b.Property<string>("ListaData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lista_Data");

                    b.HasKey("IdLista")
                        .HasName("PK__Lista__B5A70F121CFB4DDE");

                    b.HasIndex("IdInscripcion");

                    b.ToTable("Lista", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.ParticipacionTorneo", b =>
                {
                    b.Property<int>("IdParticipacionTorneo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Participation_Torneo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParticipacionTorneo"));

                    b.Property<int>("IdBando")
                        .HasColumnType("int")
                        .HasColumnName("Id_Bando");

                    b.Property<int>("IdInscripcion")
                        .HasColumnType("int")
                        .HasColumnName("Id_Inscripcion");

                    b.Property<int>("IdRonda")
                        .HasColumnType("int")
                        .HasColumnName("Id_Ronda");

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Torneo");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.HasKey("IdParticipacionTorneo");

                    b.HasIndex("IdInscripcion");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Participacion_Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.PartidaAmistosa", b =>
                {
                    b.Property<int>("IdPartidaAmistosa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Partida_Amistosa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPartidaAmistosa"));

                    b.Property<string>("EjercitoUsuario1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ejercito_Usuario1");

                    b.Property<string>("EjercitoUsuario2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ejercito_Usuario2");

                    b.Property<bool?>("EsElo")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Elo");

                    b.Property<bool?>("EsMatchedPlayPartida")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Matched_Play_Partida");

                    b.Property<bool?>("EsTorneo")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Torneo");

                    b.Property<string>("EscenarioPartida")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Escenario_Partida");

                    b.Property<DateOnly?>("FechaPartida")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Partida");

                    b.Property<int?>("GanadorPartida")
                        .HasColumnType("int")
                        .HasColumnName("Ganador_Partida");

                    b.Property<int?>("IdUsuario1")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario1");

                    b.Property<int?>("IdUsuario2")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario2");

                    b.Property<bool?>("PartidaValidadaUsuario1")
                        .HasColumnType("bit")
                        .HasColumnName("Partida_Validada_Usuario1");

                    b.Property<bool?>("PartidaValidadaUsuario2")
                        .HasColumnType("bit")
                        .HasColumnName("Partida_Validada_Usuario2");

                    b.Property<int?>("PuntosPartida")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Partida");

                    b.Property<int?>("ResultadoUsuario1")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_Usuario1");

                    b.Property<int?>("ResultadoUsuario2")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_Usuario2");

                    b.HasKey("IdPartidaAmistosa")
                        .HasName("PK__Partida___55DEAFB728B99DE3");

                    b.HasIndex("GanadorPartida");

                    b.HasIndex("IdUsuario1");

                    b.HasIndex("IdUsuario2");

                    b.ToTable("Partida_Amistosa", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.PartidaTorneo", b =>
                {
                    b.Property<int>("IdPartidaTorneo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Partida_Torneo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPartidaTorneo"));

                    b.Property<string>("EjercitoUsuario1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ejercito_Usuario1");

                    b.Property<string>("EjercitoUsuario2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ejercito_Usuario2");

                    b.Property<bool?>("EsElo")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Elo");

                    b.Property<bool?>("EsMatchedPlayPartida")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Matched_Play_Partida");

                    b.Property<string>("EscenarioPartida")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Escenario_Partida");

                    b.Property<DateOnly?>("FechaPartida")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Partida");

                    b.Property<int?>("GanadorPartidaTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Ganador_Partida_Torneo");

                    b.Property<int?>("IdEquipo1")
                        .HasColumnType("int")
                        .HasColumnName("Id_Equipo1");

                    b.Property<int?>("IdEquipo2")
                        .HasColumnType("int")
                        .HasColumnName("Id_Equipo2");

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    b.Property<int>("IdUsuario1")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario1");

                    b.Property<int>("IdUsuario2")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario2");

                    b.Property<bool?>("LiderMuertoUsuario1")
                        .HasColumnType("bit")
                        .HasColumnName("Lider_Muerto_Usuario1");

                    b.Property<bool?>("LiderMuertoUsuario2")
                        .HasColumnType("bit")
                        .HasColumnName("Lider_Muerto_Usuario2");

                    b.Property<int?>("NumeroRonda")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Ronda");

                    b.Property<bool?>("PartidaValidadaUsuario1")
                        .HasColumnType("bit")
                        .HasColumnName("Partida_Validada_Usuario1");

                    b.Property<bool?>("PartidaValidadaUsuario2")
                        .HasColumnType("bit")
                        .HasColumnName("Partida_Validada_Usuario2");

                    b.Property<int?>("PuntosPartida")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Partida");

                    b.Property<int?>("ResultadoUsuario1")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_Usuario1");

                    b.Property<int?>("ResultadoUsuario2")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_Usuario2");

                    b.HasKey("IdPartidaTorneo")
                        .HasName("PK__Partida___4AA741CABAA82AD2");

                    b.HasIndex("GanadorPartidaTorneo");

                    b.HasIndex("IdEquipo1");

                    b.HasIndex("IdEquipo2");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("IdUsuario1");

                    b.HasIndex("IdUsuario2");

                    b.ToTable("Partida_Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.RangoTorneo", b =>
                {
                    b.Property<int>("IdRango")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Rango");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRango"));

                    b.Property<string>("NombreRango")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nombre_Rango");

                    b.Property<int>("Puntos1")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_1");

                    b.Property<int>("Puntos10")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_10");

                    b.Property<int>("Puntos2")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_2");

                    b.Property<int>("Puntos3")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_3");

                    b.Property<int>("Puntos4")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_4");

                    b.Property<int>("Puntos5")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_5");

                    b.Property<int>("Puntos6")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_6");

                    b.Property<int>("Puntos7")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_7");

                    b.Property<int>("Puntos8")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_8");

                    b.Property<int>("Puntos9")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_9");

                    b.HasKey("IdRango")
                        .HasName("PK__Rango_To__B4DBE7A05469851E");

                    b.ToTable("Rango_Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Ronda", b =>
                {
                    b.Property<int>("IdRonda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Ronda");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRonda"));

                    b.Property<int?>("DuracionRonda")
                        .HasColumnType("int")
                        .HasColumnName("Duracion_Ronda");

                    b.Property<string>("EscenarioRonda")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Escenario_Ronda");

                    b.Property<string>("EstadoRonda")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Estado_Ronda");

                    b.Property<DateOnly?>("FechaFinRonda")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Fin_Ronda");

                    b.Property<DateOnly?>("FechaInicioRonda")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Inicio_Ronda");

                    b.Property<TimeOnly?>("HoraInicioRonda")
                        .HasColumnType("time")
                        .HasColumnName("Hora_Inicio_Ronda");

                    b.Property<int?>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    b.Property<int?>("NumeroRonda")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Ronda");

                    b.HasKey("IdRonda")
                        .HasName("PK__Ronda__2E6F61713267485D");

                    b.HasIndex("IdTorneo");

                    b.ToTable("Ronda");
                });

            modelBuilder.Entity("AS.Domain.Models.Torneo", b =>
                {
                    b.Property<int>("IdTorneo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Torneo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTorneo"));

                    b.Property<byte[]>("BasesTorneo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Bases_Torneo");

                    b.Property<string>("CartelTorneo")
                        .HasColumnType("text")
                        .HasColumnName("Cartel_Torneo");

                    b.Property<int>("ClassificationType")
                        .HasColumnType("int")
                        .HasColumnName("Tipo_Clasificacion");

                    b.Property<string>("DescripcionTorneo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Descripcion_Torneo");

                    b.Property<bool>("EsLiga")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Liga");

                    b.Property<bool?>("EsMatchedPlayTorneo")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Matched_Play_Torneo");

                    b.Property<bool>("EsPrivadoTorneo")
                        .HasColumnType("bit")
                        .HasColumnName("Es_Privado_Torneo");

                    b.Property<string>("EstadoTorneo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Estado_Torneo");

                    b.Property<DateOnly?>("FechaEntregaListas")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Entrega_Listas");

                    b.Property<DateOnly?>("FechaFinInscripcion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Fin_Inscripcion");

                    b.Property<DateOnly>("FechaFinTorneo")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Fin_Torneo");

                    b.Property<DateOnly>("FechaInicioTorneo")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Inicio_Torneo");

                    b.Property<TimeOnly?>("HoraFinTorneo")
                        .HasColumnType("time")
                        .HasColumnName("Hora_Fin_Torneo");

                    b.Property<TimeOnly?>("HoraInicioTorneo")
                        .HasColumnType("time")
                        .HasColumnName("Hora_Inicio_Torneo");

                    b.Property<int?>("IdRangoTorneo")
                        .HasColumnType("int")
                        .HasColumnName("ID_Rango_Torneo");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<DateOnly?>("InicioInscripciones")
                        .HasColumnType("date")
                        .HasColumnName("Inicio_Inscripciones");

                    b.Property<int?>("LimiteParticipantes")
                        .HasColumnType("int")
                        .HasColumnName("Limite_Participantes");

                    b.Property<int>("ListasPorJugador")
                        .HasColumnType("int")
                        .HasColumnName("Listas_Por_jugador");

                    b.Property<string>("LugarTorneo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Lugar_Torneo");

                    b.Property<string>("MetodosPago")
                        .HasColumnType("text")
                        .HasColumnName("Metodos_Pago");

                    b.Property<bool>("MostrarClasificacion")
                        .HasColumnType("bit")
                        .HasColumnName("Mostrar_Clasificacion");

                    b.Property<bool>("MostrarListas")
                        .HasColumnType("bit")
                        .HasColumnName("Mostrar_Listas");

                    b.Property<string>("NombreTorneo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nombre_Torneo");

                    b.Property<int>("NumeroPartidas")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Partidas");

                    b.Property<int>("PrecioTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Precio_Torneo");

                    b.Property<int>("PuntosTorneo")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Torneo");

                    b.Property<string>("TipoTorneo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo_Torneo");

                    b.HasKey("IdTorneo")
                        .HasName("PK__Torneo__F5E859A023B6CC5E");

                    b.HasIndex("IdRangoTorneo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Torneo", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Nacimiento");

                    b.Property<DateOnly>("FechaRegistro")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Registro");

                    b.Property<int?>("IdFaccion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Faccion");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NickLGDA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nick_LGDA");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre_Usuario");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primer_Apellido");

                    b.Property<bool?>("ProteccionDatos")
                        .HasColumnType("bit")
                        .HasColumnName("Proteccion_Datos");

                    b.Property<string>("SegundoApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Segundo_Apellido");

                    b.Property<string>("Telefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.HasKey("IdUsuario")
                        .HasName("PK__Usuario__DE4431C52F8B3BC9");

                    b.HasIndex("IdFaccion");

                    b.HasIndex(new[] { "Nick" }, "UQ__Usuario__7D3471B6867373C0")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Usuario__A9D105344761A97B")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("AS.Domain.Models.ClasificacionGeneral", b =>
                {
                    b.HasOne("AS.Domain.Models.Elo", "IdPuntuacionEloNavigation")
                        .WithMany("ClasificacionGenerals")
                        .HasForeignKey("IdPuntuacionElo")
                        .HasConstraintName("FK_Clasificacion_General_Elo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("ClasificacionGenerals")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Clasificacion_General_Usuario");

                    b.Navigation("IdPuntuacionEloNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.ClasificacionTorneo", b =>
                {
                    b.HasOne("AS.Domain.Models.Torneo", "IdTorneoNavigation")
                        .WithMany("ClasificacionTorneos")
                        .HasForeignKey("IdTorneo")
                        .HasConstraintName("FK_Clasificacion_Torneo_Torneo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("ClasificacionTorneos")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Clasificacion_Torneo_Usuario");

                    b.Navigation("IdTorneoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Comentario", b =>
                {
                    b.HasOne("AS.Domain.Models.Torneo", "IdTorneoNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdTorneo")
                        .HasConstraintName("FK_Comentario_Torneo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Comentario_Usuario");

                    b.Navigation("IdTorneoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Elo", b =>
                {
                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Elos")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Elo_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Equipo", b =>
                {
                    b.HasOne("AS.Domain.Models.Usuario", "Capitan")
                        .WithMany()
                        .HasForeignKey("IdCapitan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capitan");
                });

            modelBuilder.Entity("AS.Domain.Models.EquipoUsuario", b =>
                {
                    b.HasOne("AS.Domain.Models.Equipo", "Equipo")
                        .WithMany("Miembros")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AS.Domain.Models.InscripcionTorneo", b =>
                {
                    b.HasOne("AS.Domain.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("InscripcionTorneos")
                        .HasForeignKey("IdEquipo")
                        .HasConstraintName("FK_Inscripcion_Equipo");

                    b.HasOne("AS.Domain.Models.Torneo", "IdTorneoNavigation")
                        .WithMany("InscripcionTorneos")
                        .HasForeignKey("IdTorneo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inscripcion_Torneo_Torneo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("InscripcionTorneos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inscripcion_Torneo_Usuario");

                    b.Navigation("IdEquipoNavigation");

                    b.Navigation("IdTorneoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.LigaTorneo", b =>
                {
                    b.HasOne("AS.Domain.Models.Liga", "Liga")
                        .WithMany("LigaTorneos")
                        .HasForeignKey("IdLiga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS.Domain.Models.Torneo", "Torneo")
                        .WithMany("LigaTorneos")
                        .HasForeignKey("IdTorneo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liga");

                    b.Navigation("Torneo");
                });

            modelBuilder.Entity("AS.Domain.Models.Lista", b =>
                {
                    b.HasOne("AS.Domain.Models.InscripcionTorneo", "IdInscripcionNavigation")
                        .WithMany("Lista")
                        .HasForeignKey("IdInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Lista_Inscripcion");

                    b.Navigation("IdInscripcionNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.ParticipacionTorneo", b =>
                {
                    b.HasOne("AS.Domain.Models.InscripcionTorneo", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("IdInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS.Domain.Models.Torneo", "Torneo")
                        .WithMany()
                        .HasForeignKey("IdTorneo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");

                    b.Navigation("Torneo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AS.Domain.Models.PartidaAmistosa", b =>
                {
                    b.HasOne("AS.Domain.Models.Usuario", "GanadorPartidaNavigation")
                        .WithMany("PartidaAmistosaGanadorPartidaNavigations")
                        .HasForeignKey("GanadorPartida")
                        .HasConstraintName("FK_Partida_Amistosa_Ganador");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuario1Navigation")
                        .WithMany("PartidaAmistosaIdUsuario1Navigations")
                        .HasForeignKey("IdUsuario1")
                        .HasConstraintName("FK_Partida_Amistosa_Usuario1");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuario2Navigation")
                        .WithMany("PartidaAmistosaIdUsuario2Navigations")
                        .HasForeignKey("IdUsuario2")
                        .HasConstraintName("FK_Partida_Amistosa_Usuario2");

                    b.Navigation("GanadorPartidaNavigation");

                    b.Navigation("IdUsuario1Navigation");

                    b.Navigation("IdUsuario2Navigation");
                });

            modelBuilder.Entity("AS.Domain.Models.PartidaTorneo", b =>
                {
                    b.HasOne("AS.Domain.Models.Usuario", "GanadorPartidaTorneoNavigation")
                        .WithMany("PartidaTorneoGanadorPartidaNavigations")
                        .HasForeignKey("GanadorPartidaTorneo")
                        .HasConstraintName("FK_Partida_Torneo_Ganador");

                    b.HasOne("AS.Domain.Models.Equipo", "IdEquipo1Navigation")
                        .WithMany("PartidaTorneoIdEquipo1Navigations")
                        .HasForeignKey("IdEquipo1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PartidaTorneo_Equipo");

                    b.HasOne("AS.Domain.Models.Equipo", "IdEquipo2Navigation")
                        .WithMany("PartidaTorneoIdEquipo2Navigations")
                        .HasForeignKey("IdEquipo2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PartidaTorneo_Equipo2");

                    b.HasOne("AS.Domain.Models.Torneo", "IdTorneoNavigation")
                        .WithMany("PartidaTorneos")
                        .HasForeignKey("IdTorneo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Partida_Torneo_Torneo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuario1Navigation")
                        .WithMany("PartidaTorneoIdUsuario1Navigations")
                        .HasForeignKey("IdUsuario1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Partida_Torneo_Usuario1");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuario2Navigation")
                        .WithMany("PartidaTorneoIdUsuario2Navigations")
                        .HasForeignKey("IdUsuario2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Partida_Torneo_Usuario2");

                    b.Navigation("GanadorPartidaTorneoNavigation");

                    b.Navigation("IdEquipo1Navigation");

                    b.Navigation("IdEquipo2Navigation");

                    b.Navigation("IdTorneoNavigation");

                    b.Navigation("IdUsuario1Navigation");

                    b.Navigation("IdUsuario2Navigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Ronda", b =>
                {
                    b.HasOne("AS.Domain.Models.Torneo", "IdTorneoNavigation")
                        .WithMany("Ronda")
                        .HasForeignKey("IdTorneo")
                        .HasConstraintName("FK_Ronda_Torneo");

                    b.Navigation("IdTorneoNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Torneo", b =>
                {
                    b.HasOne("AS.Domain.Models.RangoTorneo", "IdRangoTorneoNavigation")
                        .WithMany("Torneos")
                        .HasForeignKey("IdRangoTorneo")
                        .HasConstraintName("FK_Torneo_Rango_Torneo");

                    b.HasOne("AS.Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Torneos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Torneo_Usuario");

                    b.Navigation("IdRangoTorneoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Usuario", b =>
                {
                    b.HasOne("AS.Domain.Models.Faccion", "IdFaccionNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdFaccion")
                        .HasConstraintName("FK_Usuario_Faccion");

                    b.Navigation("IdFaccionNavigation");
                });

            modelBuilder.Entity("AS.Domain.Models.Elo", b =>
                {
                    b.Navigation("ClasificacionGenerals");
                });

            modelBuilder.Entity("AS.Domain.Models.Equipo", b =>
                {
                    b.Navigation("InscripcionTorneos");

                    b.Navigation("Miembros");

                    b.Navigation("PartidaTorneoIdEquipo1Navigations");

                    b.Navigation("PartidaTorneoIdEquipo2Navigations");
                });

            modelBuilder.Entity("AS.Domain.Models.Faccion", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("AS.Domain.Models.InscripcionTorneo", b =>
                {
                    b.Navigation("Lista");
                });

            modelBuilder.Entity("AS.Domain.Models.Liga", b =>
                {
                    b.Navigation("LigaTorneos");
                });

            modelBuilder.Entity("AS.Domain.Models.RangoTorneo", b =>
                {
                    b.Navigation("Torneos");
                });

            modelBuilder.Entity("AS.Domain.Models.Torneo", b =>
                {
                    b.Navigation("ClasificacionTorneos");

                    b.Navigation("Comentarios");

                    b.Navigation("InscripcionTorneos");

                    b.Navigation("LigaTorneos");

                    b.Navigation("PartidaTorneos");

                    b.Navigation("Ronda");
                });

            modelBuilder.Entity("AS.Domain.Models.Usuario", b =>
                {
                    b.Navigation("ClasificacionGenerals");

                    b.Navigation("ClasificacionTorneos");

                    b.Navigation("Comentarios");

                    b.Navigation("Elos");

                    b.Navigation("InscripcionTorneos");

                    b.Navigation("PartidaAmistosaGanadorPartidaNavigations");

                    b.Navigation("PartidaAmistosaIdUsuario1Navigations");

                    b.Navigation("PartidaAmistosaIdUsuario2Navigations");

                    b.Navigation("PartidaTorneoGanadorPartidaNavigations");

                    b.Navigation("PartidaTorneoIdUsuario1Navigations");

                    b.Navigation("PartidaTorneoIdUsuario2Navigations");

                    b.Navigation("Torneos");
                });
#pragma warning restore 612, 618
        }
    }
}
